import math
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import style
import numpy as np
import matplotlib.cm as cm
import matplotlib.colors as col
from sklearn.cluster import DBSCAN
from sklearn import metrics
from matplotlib.patches import Ellipse
style.use('ggplot')
#[x,y,frame,fringes,rx,ry,angle,volunteer]
test_data = [[124.1252670288086, 127.16423797607422, '6272559', 9, 85.78260975436638, 80.31928389193743, -46.620129718655534, 'A'],
             [118.296875, 122.0, '6272559', 10, 85.70297544426332, 79.07591289387686, -32.08218715606604, 'B'],
             [122.296875, 128.0, '6272559', 10, 136.74063039199433, 68.37031519599716, -55.72885929801005, 'C'],
             [119.36120986938477, 136.00920867919922, '6272559', 10, 82.87921478071222, 82.12906709016036, -63.066499204889666, 'D'],
             [116.796875, 124.0, '6272559', 8, 83.09632964216891, 71.21797525905943, -231.84277341263095, 'E'],
             [122.796875, 130.0, '6272559', 10, 74.94664769020693, 75.8023746329889, -30.963756532073518, 'F'],
             [115.65425109863281, 127.12135314941406, '6272559', 10, 80.002767944336, 74.33290926645186, -42.27368742376968, 'G'],
             [122.296875, 132.0, '6272559', 7, 79.30952023559341, 71.02816342831905, -35.25635871296284, 'H'],
             [123.52910614013672, 115.06043243408203, '6272559', 10, 111.427356912318, 82.06128845632284, -60.12400986349249, 'I'],
             [119.796875, 132.0, '6272559', 10, 70.83078426785913, 68.26419266350405, -31.827446576673104, 'J'],
             [117.296875, 127.0, '6272559', 10, 79.56915231419774, 69.65091528472544, 136.27303002005672, 'K'],
             [119.65438842773438, 129.76206970214844, '6272559', 10, 85.00294189453147, 77.23608811119114, -41.32550363022305, 'L'],
             [113.30000305175781, 130.39999389648438, '6272559', 10, 72.94518489934754, 63.186230232619, -33.25436657471205, 'L'],
             [220.13693237304688, 144.86746215820312, '6272549', 7, 86.60956989269569, 81.40973903285695, -8.661074844476374, 'A'],
             [228.3694610595703, 298.7345886230469, '6272549', 1, 47.852297080797555, 38.79810318520719, 34.71753274607018, 'A'],
             [213.08128356933594, 142.29591369628906, '6272549', 7, 76.02318701041838, 78.32510988358221, -12.418674989011663, 'B'],
             [219.96646118164062, 299.9212341308594, '6272549', 1, 48.05716213634425, 30.02068123317987, 34.06649108828783, 'B'],
             [208.296875, 147.0, '6272549', 10, 75.53806987208503, 68.11754546370561, -3.366460663429791,'C'],
             [38.296875, 159.0, '6272549', 10, 95.1892851112981, 47.59464255564905, -93.61388075200365, 'C'],
             [221.296875, 301.0, '6272549', 1, 37.64306044943742, 38.63935817272331, 10.437475351118195, 'D'],
             [125.296875, 65.0, '6272549', 2, 390.38698748805655, 195.19349374402827, 139.98772151506532, 'D'],
             [211.5, 150.0, '6272549', 10, 69.31089380465383, 60.108235708594876, -44.3259631020155, 'E'],
             [391.5, 236.59375, '6272549', 10, 37.656340767525464, 33.37663853655727, -8.615648184164101, 'E'],
             [222.5, 298.59375, '6272549', 0, 42.0, 35.05709628591621, -183.27048792318357, 'F'],
             [12.5, 157.59375, '6272549', 10, 82.85529554590944, 71.84705978674423, -145.2039737217317, 'F'],
             [212.796875, 147.0, '6272549', 8, 72.11102550927978, 67.06713054842886, -2.5637702114650125, 'G'],
             [6.796875, 152.0, '6272549', 9, 95.04735661763561, 88.2779700718135, -94.54804240912542, 'G'],
             [214.6576690673828, 146.76266479492188, '6272549', 10, 76.42252754851465, 72.86542160626375, -46.66833876565444, 'H'],
             [25.651140213012695, 146.76266479492188, '6272549', 10, 68.11989271829552, 81.02749605245128, -1.414422745321616, 'H'],
             [207.296875, 147.0, '6272549', 10, 70.02856560004639, 74.0, 0.0, 'I'],
             [36.296875, 146.0, '6272549', 10, 110.07270324653611, 55.036351623268054, -92.08256527973089, 'I']]
for datum in test_data:
    if datum[3] == 0:
        datum[3] = np.NaN
    rx = datum[4]
    ry = datum[5]
    area_ellipse = 3.14159265359*rx*ry
    datum.append(area_ellipse)

aggregated_data_init = {'x crd': [],
                        'y crd': [],
                        'fringe': [],
                        'frame': [],
                        'area': [],
                        'label': []}
aggregated_data = pd.DataFrame(aggregated_data_init, columns=['x crd','y crd','fringe','frame','area','label'])
df = pd.DataFrame(data=test_data, columns=['X', 'Y', 'Frame', 'Fringes', 'rX', 'rY', 'Angle', 'Volunteer', 'Area'])
for name, group in df.groupby('Frame'):
    min_sample_size = math.ceil(len(list(group.groupby('Volunteer').size()))/2)
    subset = group[['X', 'Y']]
    tuples = [list(x) for x in subset.values]
    X = np.array(tuples)
    db = DBSCAN(eps=18, min_samples=(min_sample_size-1)).fit(X)
    labels = db.labels_
    cluster_raw = {'x crd': list(group['X']),
                   'y crd': list(group['Y']),
                   'fringe': list(group['Fringes']),
                   'frame': [int(name)]*(len(list(group['X']))),
                   'area': list(group['Area']),
                   'label': labels}
    clusters = pd.DataFrame(cluster_raw, columns=['x crd','y crd','fringe','frame','area','label'])
    avg_df = clusters.groupby(['label'], as_index=False).mean()
    avg_df_f = avg_df[avg_df.label != -1]
    aggregated_data = aggregated_data.append(avg_df_f,ignore_index=True)
print (aggregated_data)




x = [1,2,3,4,5]
y = [10,20,30,40,50]
aa = {'x':x,
      'y':y}
dd = pd.DataFrame(data=aa, columns=['x','y'])
w = [8,9,8,9]
z = [6,7,6,7]
bb = {'y':w,
      'x':z}
ee = pd.DataFrame(data=bb, columns=['x','y'])
gg = ee.rolling(window=60,min_periods=1)
hh = gg.aggregate([np.std])
#print (hh)
dd = dd.append(ee,ignore_index=True)
dd = dd.append(ee,ignore_index=True)
#print (dd)
